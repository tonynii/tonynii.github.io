(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{524:function(e,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[e._v("python语言作为一门使用非常广泛的语言，在客户端的开发上面有基本的tk，还有pyQT等，这些工具都比较重，在多平台支持上或多或少存在不足。现在web技术发展日新月异，Electron可以基于web技术开发出各种桌面应用，如VSCode等。python也有类似的库提供基于web的界面开发，比如nicegui。网上也有大神使用electron结合thrift、zerorpc，使用python作为后端进行界面开发。")]),e._v(" "),t("p",[e._v("本文基于Quasar框架进行桌面端开发，使用electron启动python restfull子进程，由python实现具体业务逻辑。")])]),t("h1",{attrs:{id:"框架流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架流程"}},[e._v("#")]),e._v(" 框架流程")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("start\n |\n V\n+--------------------+\n|                    | start\n| quasar electron    +-------------\x3e +------------------+\n|                    | sub process   |                  |\n| (browser)          |               | python server    |\n|                    |               |                  |\n| (all html/css/js)  |               | (business logic) |\n|                    |   restfull    |                  |\n| (node.js runtime,  | <-----------\x3e | (restfull)       |\n|  axio)             | communication |                  |\n|                    |               |                  |\n+--------------------+               +------------------+\n")])])]),t("p",[e._v("本文主要介绍基于electron的端开发，quasar项目的初始化与electron编译可参考"),t("a",{attrs:{href:"https://quasar.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("进行配置。")]),e._v(" "),t("h1",{attrs:{id:"后端脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端脚本"}},[e._v("#")]),e._v(" 后端脚本")]),e._v(" "),t("ol",[t("li",[e._v("在src同级目录下创建backhaul目录；")]),e._v(" "),t("li",[e._v("在目录下新建api.py文件，输入如下内容；")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import tornado.ioloop\nimport pyrestful.rest\n\nfrom pyrestful import mediatypes\nfrom pyrestful.rest import get\n\nclass EchoService(pyrestful.rest.RestHandler):\n     @get(_path="/echo/{name}", _produces=mediatypes.APPLICATION_JSON)\n     def sayHello(self, name):\n          return {"Hello":name}\n\nif __name__ == \'__main__\':\n     try:\n          print("Start the echo service")\n          app = pyrestful.rest.RestService([EchoService])\n          app.listen(58997)\n          tornado.ioloop.IOLoop.instance().start()\n     except KeyboardInterrupt:\n          print("\\nStop the echo service")\n')])])]),t("p",[e._v("需要安装tornado与pyrestful两个依赖库")]),e._v(" "),t("h1",{attrs:{id:"前端适配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端适配"}},[e._v("#")]),e._v(" 前端适配")]),e._v(" "),t("h2",{attrs:{id:"启动后端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动后端"}},[e._v("#")]),e._v(" 启动后端")]),e._v(" "),t("p",[e._v('在"electron-main.js"中使用child_process启动后端进程，参考代码如下：')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('* import { app, BrowserWindow } from "electron"; *\nimport path from "path";\n* import os from "os"; *\n\n// needed in case process is undefined under Linux\n* const platform = process.platform || os.platform(); *\n\n* process.env["ELECTRON_DISABLE_SECURITY_WARNINGS"] = "true"; *\n\n* let mainWindow; *\nlet pyProc = null;\nlet pyPort = null;\n\n// 启动后端进程\nconst createPyProc = () => {\n  let port = "58997";\n\n  if (process.env.DEV) {\n    // if on DEV or Production with debug enabled\n    let script = path.join(__dirname, "../..", "backhaul", "api.py");\n    console.log("script path: " + script);\n    pyProc = require("child_process").spawn("python", [script, "-P", port]);\n  } else {\n    // we\'re on production; no access to devtools pls\n    let script = path.join(\n      __dirname + ".unpacked",\n      process.env.QUASAR_PUBLIC_FOLDER,\n      "api",\n      "api"\n    );\n    console.log("script path: " + script);\n    pyProc = require("child_process").spawn(script, ["-P", port]);\n  }\n\n  if (pyProc != null) {\n    console.log("child process success");\n  }\n  console.log("Spawned child pid: " + pyProc.pid);\n};\n\nconst exitPyProc = () => {\n  pyProc.kill();\n  pyProc = null;\n  pyPort = null;\n};\n\n// 原本的代码这里省略\n\n// 注册调用开启后端和关闭机制\napp.on("ready", createPyProc);\napp.on("will-quit", exitPyProc);\n')])])]),t("p",[e._v("主要是在原文件中加入createPyProc和exitPyProc并注册调用时机。")]),e._v(" "),t("p",[e._v("启动app时会根据当前的运行环境决定运行编译打包文件还是源文件，此处在打包发布章详细介绍。")]),e._v(" "),t("h2",{attrs:{id:"添加axios与api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加axios与api"}},[e._v("#")]),e._v(" 添加axios与API")]),e._v(" "),t("ul",[t("li",[e._v("参考"),t("a",{attrs:{href:"https://quasar.dev/quasar-cli-vite/ajax-requests",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("添加axios；")]),e._v(" "),t("li",[e._v("设置axios的baseURL与上一步的一致，如http://127.0.0.1:58997")]),e._v(" "),t("li",[e._v("在src文件夹中添加api目录，新增backhaul.js文件，参考如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import { api } from "boot/axios";\n\nexport function echo(name = "test") {\n  let url = "/echo/" + name;\n  return api.get(url);\n}\n\n')])])]),t("h2",{attrs:{id:"与后端通讯实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与后端通讯实例"}},[e._v("#")]),e._v(" 与后端通讯实例")]),e._v(" "),t("p",[e._v("本例以src/layouts/MainView.vue页面为例，是在app启动时访问后端echo接口。")]),e._v(" "),t("ul",[t("li",[e._v("按照下述代码引入相关依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import { ref, onBeforeMount, onMounted } from "vue";\nimport { echo } from "../api/backhaul";\n\n')])])]),t("ul",[t("li",[e._v("在setup中添加如下代码")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    const $q = useQuasar();\n\n    function call_backhaul() {\n      echo("isfront")\n        .then((resp) => {\n          console.log("echo with backhaul: ", resp);\n        })\n        .catch(() => {\n          $q.notify({\n            color: "negative",\n            position: "center",\n            message: "后端连接错误",\n            icon: "report_problem",\n          });\n        });\n    }\n\n    onMounted(() => {\n      call_backhaul();\n    });\n')])])]),t("ul",[t("li",[e._v("使用yarn dev -m electron启动测试环境，页面不会弹出错误提示，在开发者工具上可以看到控制台打印出接口输出。")])]),e._v(" "),t("h1",{attrs:{id:"打包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[e._v("#")]),e._v(" 打包")]),e._v(" "),t("ul",[t("li",[e._v("在quasar.config.js中修改electron中的bundler为“builder”；")]),e._v(" "),t("li",[e._v('在quasar.config.js中electron -> bundler项目中添加asarUnpack字段，值为["api"];')]),e._v(" "),t("li",[e._v("在package.json文件scripts中添加如下编译选项：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    "build-backhaul": "pyinstaller ./backhaul/api.py --clean --add-data ./backhaul/resource/:./resource --distpath ./public --noconfirm",\n    "desktop:dev": "quasar dev -m electron",\n    "desktop:publish:debug": "yarn build-backhaul && quasar build -m electron -d",\n    "desktop:publish": "yarn build-backhaul && quasar build -m electron"\n')])])]),t("blockquote",[t("ul",[t("li",[e._v("builder 默认会将资源打包为asar格式文件，需要在配置中设置unpack，否则打包时无法执行文件；")]),e._v(" "),t("li",[e._v('基于上述原因，在生产环节的启动路径添加了".unpacked"；')]),e._v(" "),t("li",[e._v("Quasar 打包会默认将public中的文件放入资源文件夹，所以python打包的目标路径设置为public，生成的最终在public/api路径下；")]),e._v(" "),t("li",[e._v("python打包建议使用纯净的虚拟环境，否则pyinstaller可能会把不需要的包打包，造成app体积增大；")])])]),e._v(" "),t("h1",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://quasar.dev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Quasar"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/post/7153189686091972645",target:"_blank",rel:"noopener noreferrer"}},[e._v("用Quasar开发Vue3+Electron跨平台应用的简单指南"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/AlexTan-b-z/Electron-Python",target:"_blank",rel:"noopener noreferrer"}},[e._v("WIN10 Electron+Python界面开发（通信方式：thrift）"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);